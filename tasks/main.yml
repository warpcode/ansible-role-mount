---
- name: Fail if mount is missing what parameters
  fail:
    msg: "Mount parameters [ type ] is missing for mount {{ item }}"
  with_items: "{{ mount_systemd }}"
  when:
    - item.type is undefined

- name: Fail if mount is missing what parameters
  fail:
    msg: "Mount parameters [ what ] is missing for mount {{ item }}"
  with_items: "{{ mount_systemd }}"
  when:
    - item.what is undefined

- name: Fail if mount is missing where parameters
  fail:
    msg: "Mount parameters [ where ] is missing for mount {{ item }}"
  with_items: "{{ mount_systemd }}"
  when:
    - item.where is undefined

- name: Fail if mount is swap type
  fail:
    msg: "Mount parameters [ type ] cannot be swap for mount {{ item }}"
  with_items: "{{ mount_systemd }}"
  when:
    - item.type == 'swap'

- include_tasks: systemd.yml
  with_items: "{{ mount_systemd }}"

- include_tasks: fstab.yml
  with_items: "{{ mount_fstab }}"

# - name: Setup systemd Service for mountpoints
#   become: yes
#   template:
#     src: systemd_mount.j2
#     dest: "/etc/systemd/system/{{ item.mount| regex_replace('^\\/|\\/$', '') | replace('/', '-') }}.mount"
#     mode: 0755
#     owner: root
#     group: root
#   with_items: "{{ mount_automounts }}"

# - name: Setup systemd Service for automount
#   become: yes
#   template:
#     src: systemd_automount.j2
#     dest: "/etc/systemd/system/{{ item.mount| regex_replace('^\\/|\\/$', '') | replace('/', '-') }}.automount"
#     mode: 0755
#     owner: root
#     group: root
#   with_items: "{{ mount_automounts }}"

# - name: reload systemd
#   command: systemctl daemon-reload

# - name: Ensure automount service is started
#   become: yes
#   systemd:
#     name: "{{ item.mount| regex_replace('^\\/|\\/$', '') | replace('/', '-') }}.automount"
#     state: started
#     enabled: True
#   with_items: "{{ mount_automounts }}"

# - name: Ensure mount service is enabled and started
#   become: yes
#   systemd:
#     name: "{{ item.mount| regex_replace('^\\/|\\/$', '') | replace('/', '-') }}.mount"
#     state: started
#     enabled: True
#   with_items: "{{ mount_automounts }}"

# - name: Ensure mount dirs exist for fstab
#   become: yes
#   file:
#     path: "{{ item.mount }}"
#     state: directory
#     owner: "{{ item.owner | default(omit) }}"
#     group: "{{ item.group | default(omit) }}"
#     mode: "{{ item.mode | default(omit) }}"
#   with_items: "{{ mount_fstab }}"

# - name: Create fstab entries for devices
#   become: yes
#   mount:
#     name: "{{ item.mount }}"
#     src: "{{ item.device }}"
#     fstype: "{{ item.fstype }}"
#     passno: "{{ item.passno | default(omit) }}"
#     dump: "{{ item.dump | default(omit) }}"
#     opts: "{{ item.opts | default('') }}"
#     state: "{{ item.state | default('present') }}"
#   when: item.device_is_dir is not defined or item.device_is_dir == False
#   with_items: "{{ mount_fstab }}"

# - name: Ensure device directories exist
#   become: yes
#   file:
#     path: "{{ item.device }}"
#     state: directory
#     owner: "{{ item.owner | default(omit) }}"
#     group: "{{ item.group | default(omit) }}"
#     mode: "{{ item.mode | default(omit) }}"
#   when: item.device_is_dir | default(False)
#   with_items: "{{ mount_fstab }}"

# - name: Create fstab entries for devices as directories
#   become: yes
#   mount:
#     name: "{{ item.mount }}"
#     src: "{{ item.device }}"
#     fstype: "{{ item.fstype }}"
#     passno: "{{ item.passno | default(omit) }}"
#     dump: "{{ item.dump | default(omit) }}"
#     opts: "{{ item.opts | default('') }}"
#     state: "{{ item.state | default('present') }}"
#   when: item.device_is_dir | default(False)
#   with_items: "{{ mount_fstab }}"
